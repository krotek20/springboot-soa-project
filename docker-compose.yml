version: '3.9'

services:
  ## Redis
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    restart: always

  ## Kafka Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ## Kafka Server
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order_service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: always

  postgres-product:
    container_name: postgres-product
    image: postgres
    environment:
      POSTGRES_DB: product_service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./postgres-product:/data/postgres
    ports:
      - "5432:5432"
    restart: always

  postgres-payment:
    container_name: postgres-payment
    image: postgres
    environment:
      POSTGRES_DB: payment_service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./postgres-payment:/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    restart: always

  postgres-user:
    container_name: postgres-user
    image: postgres
    environment:
      POSTGRES_DB: user_service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./postgres-user:/data/postgres
    expose:
      - "5434"
    ports:
      - "5434:5434"
    command: -p 5434
    restart: always

  ## Eureka Server
  serviceregistry:
    image: raduvf20/serviceregistry:latest
    container_name: serviceregistry
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  ## Config Server
  configserver:
    image: raduvf20/configserver:latest
    container_name: configserver
    pull_policy: always
    ports:
      - "9296:9296"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://configserver:9296/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - serviceregistry

  ## Cloud Gateway
  cloudgateway:
    image: raduvf20/cloudgateway:latest
    container_name: cloudgateway
    pull_policy: always
    ports:
      - "9090:9090"
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=http://configserver:9296
    depends_on:
      configserver:
        condition: service_healthy

  ## Security Server
  securityserver:
    image: raduvf20/securityserver:latest
    container_name: securityserver
    pull_policy: always
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5434/user_service
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=http://configserver:9296
    depends_on:
      - postgres-user
      - cloudgateway

  ## Order Service
  orderservice:
    image: raduvf20/orderservice:latest
    container_name: orderservice
    pull_policy: always
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order_service
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=http://configserver:9296
    depends_on:
      - postgres-order
      - broker
      - cloudgateway

  ## Product Service
  productservice:
    image: raduvf20/productservice:latest
    container_name: productservice
    pull_policy: always
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5432/product_service
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=http://configserver:9296
    depends_on:
      - postgres-product
      - broker
      - cloudgateway

  ## Payment Service
  paymentservice:
    image: raduvf20/paymentservice:latest
    container_name: paymentservice
    pull_policy: always
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-payment:5433/payment_service
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER_URL=http://configserver:9296
    depends_on:
      - postgres-payment
      - broker
      - cloudgateway